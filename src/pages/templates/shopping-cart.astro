---
import Base from "../../layouts/base.astro"
import Button from "../../components/button.astro"
import StarsRating from "../../partials/stars-rating.astro"
import Spinner from "../../icons/spinner.astro"
import Cart from "../../icons/cart.astro"
---
<style>
    .animate__animated {
        animation-duration: 1s;
        animation-fill-mode: both;
    }
    @keyframes rubberBand {
        from {
            -webkit-transform: scale3d(1, 1, 1);
            transform: scale3d(1, 1, 1);
        }

        30% {
            -webkit-transform: scale3d(1.25, 0.75, 1);
            transform: scale3d(1.25, 0.75, 1);
        }

        40% {
            -webkit-transform: scale3d(0.75, 1.25, 1);
            transform: scale3d(0.75, 1.25, 1);
        }

        50% {
            -webkit-transform: scale3d(1.15, 0.85, 1);
            transform: scale3d(1.15, 0.85, 1);
        }

        65% {
            -webkit-transform: scale3d(0.95, 1.05, 1);
            transform: scale3d(0.95, 1.05, 1);
        }

        75% {
            -webkit-transform: scale3d(1.05, 0.95, 1);
            transform: scale3d(1.05, 0.95, 1);
        }

        to {
            -webkit-transform: scale3d(1, 1, 1);
            transform: scale3d(1, 1, 1);
        }
    }
    .animate__rubberBand {
        animation-name: rubberBand;
    }
</style>
<script>
	import Alpine from "alpinejs"
    import axios from "axios"

    type Product = {
        id: number,
        thumbnail: string,
        price: number,
        title: string,
        img: string,
        rating: number
    }

    type CartProduct = Product & {amount: number}

    type ProductsGetRes = {
        limit: number,
        products: Product[],
        skip: number,
        total: number
    }

    type ShoppingCartProductsList = {
        loading: boolean,
        products: Product[],
        limit: number,
        page: number,
        init(): Promise<void>,
        paginate(): Promise<void>
    }

    type ShoppingCartTheCart = {
        totalPrice: number,
        totalProducts: number,
        products: CartProduct[],
        toggleCartBtn: Element,
        init(): void,
        addProduct(product:Product): void
    }

    const shoppingCartTheCart:ShoppingCartTheCart = {
        totalPrice: 0,
        totalProducts: 0,
        products: [],
        toggleCartBtn: document.querySelector('.toggleCartBtn')!,
        init() {
            this.toggleCartBtn.addEventListener('animationend', () => {
                this.toggleCartBtn.classList.remove('animate__rubberBand')
            })
        },
        addProduct(newProduct:Product) {
            this.totalPrice += newProduct.price
            this.totalProducts += 1
            const productIndex = this.products.findIndex( product => product.id === newProduct.id)
            if(productIndex > -1) {
                this.products[productIndex].amount += 1
            } else {
                this.products.push({...newProduct, amount: 1})
            }
            this.toggleCartBtn.classList.add('animate__rubberBand')
        }
    }

    Alpine.store('shoppingCartTheCart', shoppingCartTheCart)

	Alpine.data('shoppingCartProductsList', ():ShoppingCartProductsList => ({
        loading: false,
        products: [],
        limit: 10,
        page: 1,
		async init() {
			const res = await axios.get<ProductsGetRes>('https://dummyjson.com/products?limit=10&skip=0')
            this.products = res.data.products
		},
        async paginate() {

            if(this.loading) return

            this.loading = true

            this.page += 1
            const skip = ( this.page - 1 ) * this.limit;
			const res = await axios.get<ProductsGetRes>(`https://dummyjson.com/products?limit=${this.limit}&skip=${skip}`)
            this.products = [...this.products, ...res.data.products]

            this.loading = false
        }
	}))

	Alpine.start()
</script>
<Base>
	<title>Shopping Cart - Web Template</title>
	<meta name="description" content="A web template for a shopping cart displaying a list of products in a Masonry layout, made with Alpine.js">
	<meta property="og:title" content="Web template for a shopping cart">
	<meta property="og:description" content="Shopping cart with an infinite scroll list of products. Add or remove products from the shopping cart and send orders.">
	<meta property="og:image" content="https://andrewsaeed.dev/me.png">
	<meta property="og:url" content="https://andrewsaeed.dev/templates/shopping-cart">
	<meta property="og:type" content="website">

	<main slot="main">
		
        <div x-data="shoppingCartProductsList">
            
            <ul class="grid gap-2 md:grid-cols-3 lg:grid-cols-4 p-2">

                <template x-for="product in products" :key="product.id">
                    <li class="grid p-2 border border-black-dark transition duration-300 ease-in-out overflow-hidden hover:bg-white-dark [&:hover_img]:scale-125">
                        <div class="flex justify-center">
                            <img class="transition duration-300 ease-in-out" :src="`${product.thumbnail}`" alt="">
                        </div>
                        <div class="grid gap-y-1 mt-6">
                            <h3 class="text-base-1 font-bold" x-text="`${product.id} ${product.title}`"></h3>
                            <StarsRating />
                            <div class="text-base-2 font-bold" x-text="`$${product.price}`"></div>
                            <div class="self-end" @click="$store.shoppingCartTheCart.addProduct(product)">
                                <Button btnType="button" size="small-text" stretch={true}>add to cart</Button>
                            </div>
                        </div>
                    </li>
                </template>
            </ul>

            <div class="mt-4 p-2" @click="paginate">
                <Button btnType="button" style="primary-icon-text" size="small-icon-text" stretch={true}>
                    <span class="icon px-2 animate-spin" slot="icon" x-show="loading">
                        <Spinner />
                    </span>
                    <span slot="text">load more</span>
                </Button>
            </div>

            <div class="fixed bottom-[1rem] right-0 z-10 p-4 cursor-pointer animate__animated toggleCartBtn">
                <div class="relative h-4">
                    <div class="absolute top-0 right-0 z-10 min-w-[1.6875rem] inline-flex justify-center items-center bg-black-dark text-white-light rounded-full">
                        <span class="text-base-1 px-2" x-text="$store.shoppingCartTheCart.totalProducts"></span>
                    </div>
                </div>
                <div class="relative bg-black-dark p-8 rounded-full">
                    <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[3.125rem] [&_svg_path]:stroke-white-light [&_svg_circle]:stroke-white-light">
                        <Cart />
                    </div>
                </div>
                <div class="absolute bottom-[0.1875rem] left-1/2 -translate-x-1/2 bg-black-dark text-white-light px-2 rounded-full" x-text="'$' + $store.shoppingCartTheCart.totalPrice.toFixed(2)"></div>
            </div>
        </div>
	</main>
</Base>