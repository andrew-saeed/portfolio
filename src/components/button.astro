---
interface Props {
  type?: 'button' | 'link';
  href?: string;
  style?: 'text' | 'icon';
  btnType?: 'button' | 'reset' | 'submit';
  size?: 'large' | 'medium' | 'small';
  colors?: 'primary' | 'outline';
}

const baseStyle = `transition duration-300 ease-in-out shadow-base`

const colorsCol = {
  primary: `bg-black-light hover:bg-black-dark [&_svg_path]:fill-white`,
  outline: `border border-black-light [&_svg_path]:fill-black-light`
}

const styles = {
  text: `text-white font-bold capitalize rounded-lg`,
  icon : `relative inline-block rounded-full
  [&_svg]:absolute [&_svg]:translate-x-[-50%] [&_svg]:translate-y-[-50%]` 
}

const sizes = {
  text: {
    small: '',
    medium: 'text-base-1 px-4 py-2',
    large: '',
  },
  icon: {
    small: `p-4 [&_svg]:w-[1.1rem] [&_svg]:h-[1.1rem]`,
    medium: `p-5 [&_svg]:w-[1.3rem] [&_svg]:h-[1.3rem]`,
    large: `p-7 [&_svg]:w-[1.8rem] [&_svg]:h-[1.8rem]`
  }
}

const { 
  type = 'button', 
  href, 
  style = 'text', 
  btnType = 'button',
  size = 'medium',
  colors = 'primary'
} = Astro.props
---
{
  type === 'link' ? <a 
    class:list={[
      baseStyle, 
      styles[style], 
      sizes[style][size],
      colorsCol[colors]
    ]}
    href={href}
  >
    <slot />
  </a> : <button 
    class:list={[
      baseStyle, 
      styles[style], 
      sizes[style][size],
      colorsCol[colors]
    ]}
    type={btnType}
  >
    <slot />
  </button>
}